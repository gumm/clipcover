#!/usr/bin/env node

'use strict';


/**
 * Module dependencies.
 */
var program = require('commander');
var fs = require('fs');
var coverage = require('../lib/coverage');
var path = require('path');
var util = require('util');
var childProcess = require('child_process');
var spawn = require('child_process').spawn;
var reportPlugin = require('../lib/reporters');
var phantomjs = require('phantomjs');

/**
 * Write to the console.
 * @type {reportPlugin.Spec}
 */
var write = new reportPlugin.Spec();

//--------------------------------------------------[ Config Coverage Module ]--

var coverageManager = (function() {
    var covMan;
    var userCover = 'jscoverage';
    if (userCover && coverage[userCover]) {
        covMan = new coverage[userCover]();
    } else {
        covMan = new coverage.none();
    }
    return covMan;
})();

var workSpace = '/home/gumm/Workspace/smart-2.12';
var reportDestination = workSpace + '/media/coverage/';
var spawnArgs = [
    '--document-root=' + workSpace,
    '--ip-address=0.0.0.0',
    '--port=8080',
    '--no-instrument=/media/js/closure-library/',
    '--report-dir=' + reportDestination
];
coverageManager.start(spawn, spawnArgs);

//-------------------------------------------------[ PhantomJs Child Process ]--

/**
* The arguments that will be passed to phantomjs.
* @type {Array}
*/
var childArgs = [
    path.join(__dirname, '../lib/phantomjob.js'),
    'some other argument (passed to phantomjs script)'
];

/**
* @type {*}
*/
var phantomProcess = childProcess.execFile(
    phantomjs.path,
    childArgs,
    {timeout: 600000},
    function(err, stdout, stderr) {
        write.phantomDebug(stdout);
    }
);

/**
* Display console output.
*/
phantomProcess.stdout.on('data', function(data) {
    util.print(data.toString());
});

phantomProcess.on('exit', function(code) {
    if (code === 127) {
        write.phantomDebug('Perhaps phantomjs is not installed?\n');
    }
    coverageManager.stop(spawn);
    write.phantomDebug('Phantom dead.');

    process.exit(code);
});