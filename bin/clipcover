#!/usr/bin/env node

'use strict';


/**
 * Module dependencies.
 */
var program = require('commander');
var fs = require('fs');

var jsCoverageReporter = require('../lib/coverage').jsCoverageReporter;
var path = require('path');
var util = require('util');
var childProcess = require('child_process');
var reportPlugin = require('../lib/reporters');
var phantomjs = require('phantomjs');

//-----------------------------------------------------------[ CLI Arguments ]--

/**
 * Build command line options.
 */
program.version(require('../package.json').version)
    .usage('[options] workspace')
    .option('-f, --test-file <path>',
        'relative path from workspace to test file ' +
                '[media/js/tests/all_tests.html]',
        'media/js/tests/all_tests.html')
    .option('-i, --ignore <url>',
        'relative path from workspace, nothing here will be instrumented '+
                '[none]')
    .option('-t, --timeout <milliseconds>',
        'maximum time phantomjs will be kept alive [600000]',
        parseInt, 2000)
    .option('-s, --server-ip-address <address>',
        'coverage server ip address [0.0.0.0]',
        '0.0.0.0')
    .option('-p, --server-port <port>',
        'coverage server port [8080]',
        '8080')
    .option('-r, --report-dir <path>',
        'absolute path to dir where reports will be written [/tmp/reports/]',
        '/tmp/reports/')
    .option('-w, --report-format <name>',
        'a format for the output [Spec|Html|Dot]',
        'Spec')
    .option('-o, --output-file <path>',
            'name of test result output file to be written in report dir [tap.txt]',
            'tap.txt')
    .parse(process.argv);

var config = {
    workSpace: program.args[0],
    testFile: program.testFile,
    timeout: program.timeout,
    serverIpAddress: program.serverIpAddress,
    serverPort: program.serverPort,
    reportDir: program.reportDir,
    outputFile: path.join(program.reportDir, program. outputFile),
    ignoreUrl: program.ignore,
    reportFormat: program.reportFormat,
    path: path,
    fs: fs
};
config.phantomTarget = path.join('http://' +
        config.serverIpAddress + ':' + config.serverPort + '/',
        config.testFile);

if (program.args.length !== 1) {
    program.help();
    process.exit(1);
}

//----------------------------------------------------------[ Console Writer ]--

/**
 * Write to the console.
 * @type {reportPlugin.Spec}
 */
var write = new reportPlugin.Spec();
config.write = write;

//--------------------------------------------------[ Config Coverage Module ]--

var spawnArgs = [
    '--document-root=' + config.workSpace,
    '--ip-address=' + config.serverIpAddress,
    '--port=' + config.serverPort,
    '--report-dir=' + config.reportDir
];
if (!!config.ignoreUrl) {
    spawnArgs.push('--no-instrument=' + config.ignoreUrl);
}

write.phantomDebug(spawnArgs.join(' '));

//childProcess.exec('jscoverage-server --verbose', function);
var coverageManager = new jsCoverageReporter();
coverageManager.start(spawnArgs);




//-------------------------------------------------[ PhantomJs Child Process ]--

/**
* The arguments that will be passed to phantomjs.
* @type {Array}
*/
var childArgs = [
    path.join(__dirname, '../lib/phantomjob.js'),
    config.phantomTarget,
    config.outputFile,
    config.reportFormat
];

/**
* @type {*}
*/
var phantomProcess = childProcess.execFile(
    phantomjs.path,
    childArgs,
    {timeout: 600000},
    function(err, stdout, stderr) {
        write.phantomDebug(stdout);
    }
);

/**
* Display console output.
*/
phantomProcess.stdout.on('data', function(data) {
    util.print(data.toString());
});

phantomProcess.on('exit', function(code) {

//    childProcess.exec('jscoverage-server --shutdown');
//    coverageManager.stop();

    var exitCallback = function() {
        write.phantomDebug('Process stopped.');
        process.exit(code);
    };

    coverageManager.stop(exitCallback);

    if (code === 127) {
        write.phantomDebug('Perhaps phantomjs is not installed?\n');
        exitCallback();
    } else {
        exitCallback();
    }
});


